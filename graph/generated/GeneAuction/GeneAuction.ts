// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BulkVoteCast extends ethereum.Event {
  get params(): BulkVoteCast__Params {
    return new BulkVoteCast__Params(this);
  }
}

export class BulkVoteCast__Params {
  _event: BulkVoteCast;

  constructor(event: BulkVoteCast) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get geneIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class GeneProposed extends ethereum.Event {
  get params(): GeneProposed__Params {
    return new GeneProposed__Params(this);
  }
}

export class GeneProposed__Params {
  _event: GeneProposed;

  constructor(event: GeneProposed) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class GeneRemovalVote extends ethereum.Event {
  get params(): GeneRemovalVote__Params {
    return new GeneRemovalVote__Params(this);
  }
}

export class GeneRemovalVote__Params {
  _event: GeneRemovalVote;

  constructor(event: GeneRemovalVote) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get voteWeight(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GeneRemoved extends ethereum.Event {
  get params(): GeneRemoved__Params {
    return new GeneRemoved__Params(this);
  }
}

export class GeneRemoved__Params {
  _event: GeneRemoved;

  constructor(event: GeneRemoved) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GeneVoteCast extends ethereum.Event {
  get params(): GeneVoteCast__Params {
    return new GeneVoteCast__Params(this);
  }
}

export class GeneVoteCast__Params {
  _event: GeneVoteCast;

  constructor(event: GeneVoteCast) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VotingCreated extends ethereum.Event {
  get params(): VotingCreated__Params {
    return new VotingCreated__Params(this);
  }
}

export class VotingCreated__Params {
  _event: VotingCreated;

  constructor(event: VotingCreated) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get aminalOne(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get aminalTwo(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalLove(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class VotingSettled extends ethereum.Event {
  get params(): VotingSettled__Params {
    return new VotingSettled__Params(this);
  }
}

export class VotingSettled__Params {
  _event: VotingSettled;

  constructor(event: VotingSettled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get childAminalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winningGeneIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get totalEnergyTransferred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GeneAuction__auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getAminalOne(): BigInt {
    return this.value0;
  }

  getAminalTwo(): BigInt {
    return this.value1;
  }

  getTotalLove(): BigInt {
    return this.value2;
  }

  getStartTime(): BigInt {
    return this.value3;
  }

  getEndTime(): BigInt {
    return this.value4;
  }

  getSettled(): boolean {
    return this.value5;
  }

  getChildAminalId(): BigInt {
    return this.value6;
  }
}

export class GeneAuction__getAuctionInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getAminalOne(): BigInt {
    return this.value0;
  }

  getAminalTwo(): BigInt {
    return this.value1;
  }

  getTotalLove(): BigInt {
    return this.value2;
  }

  getStartTime(): BigInt {
    return this.value3;
  }

  getEndTime(): BigInt {
    return this.value4;
  }

  getSettled(): boolean {
    return this.value5;
  }

  getChildAminalId(): BigInt {
    return this.value6;
  }
}

export class GeneAuction__getCategoryVotingResultValue0Struct extends ethereum.Tuple {
  get highestVotes(): BigInt {
    return this[0].toBigInt();
  }

  get winningGeneId(): BigInt {
    return this[1].toBigInt();
  }

  get proposedGenes(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get tiedGenes(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class GeneAuction__getParentTraitsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getParentOneTraits(): Array<BigInt> {
    return this.value0;
  }

  getParentTwoTraits(): Array<BigInt> {
    return this.value1;
  }
}

export class GeneAuction extends ethereum.SmartContract {
  static bind(address: Address): GeneAuction {
    return new GeneAuction("GeneAuction", address);
  }

  ENERGY_TRANSFER_PERCENTAGE(): BigInt {
    let result = super.call(
      "ENERGY_TRANSFER_PERCENTAGE",
      "ENERGY_TRANSFER_PERCENTAGE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ENERGY_TRANSFER_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ENERGY_TRANSFER_PERCENTAGE",
      "ENERGY_TRANSFER_PERCENTAGE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTING_DURATION(): BigInt {
    let result = super.call(
      "VOTING_DURATION",
      "VOTING_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_VOTING_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VOTING_DURATION",
      "VOTING_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aminalFactory(): Address {
    let result = super.call("aminalFactory", "aminalFactory():(address)", []);

    return result[0].toAddress();
  }

  try_aminalFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aminalFactory",
      "aminalFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aminalsContract(): Address {
    let result = super.call(
      "aminalsContract",
      "aminalsContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_aminalsContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aminalsContract",
      "aminalsContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionCounter(): BigInt {
    let result = super.call("auctionCounter", "auctionCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCounter",
      "auctionCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(param0: BigInt): GeneAuction__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new GeneAuction__auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
    );
  }

  try_auctions(
    param0: BigInt,
  ): ethereum.CallResult<GeneAuction__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GeneAuction__auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
      ),
    );
  }

  createAuction(
    aminalOne: BigInt,
    aminalTwo: BigInt,
    totalLove: BigInt,
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aminalOne),
        ethereum.Value.fromUnsignedBigInt(aminalTwo),
        ethereum.Value.fromUnsignedBigInt(totalLove),
      ],
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    aminalOne: BigInt,
    aminalTwo: BigInt,
    totalLove: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aminalOne),
        ethereum.Value.fromUnsignedBigInt(aminalTwo),
        ethereum.Value.fromUnsignedBigInt(totalLove),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  geneRegistry(): Address {
    let result = super.call("geneRegistry", "geneRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_geneRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("geneRegistry", "geneRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  genes(): Address {
    let result = super.call("genes", "genes():(address)", []);

    return result[0].toAddress();
  }

  try_genes(): ethereum.CallResult<Address> {
    let result = super.tryCall("genes", "genes():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuctionInfo(auctionId: BigInt): GeneAuction__getAuctionInfoResult {
    let result = super.call(
      "getAuctionInfo",
      "getAuctionInfo(uint256):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );

    return new GeneAuction__getAuctionInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
    );
  }

  try_getAuctionInfo(
    auctionId: BigInt,
  ): ethereum.CallResult<GeneAuction__getAuctionInfoResult> {
    let result = super.tryCall(
      "getAuctionInfo",
      "getAuctionInfo(uint256):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GeneAuction__getAuctionInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
      ),
    );
  }

  getCategoryVoting(
    auctionId: BigInt,
    category: i32,
  ): GeneAuction__getCategoryVotingResultValue0Struct {
    let result = super.call(
      "getCategoryVoting",
      "getCategoryVoting(uint256,uint8):((uint256,uint256,uint256[],uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
      ],
    );

    return changetype<GeneAuction__getCategoryVotingResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getCategoryVoting(
    auctionId: BigInt,
    category: i32,
  ): ethereum.CallResult<GeneAuction__getCategoryVotingResultValue0Struct> {
    let result = super.tryCall(
      "getCategoryVoting",
      "getCategoryVoting(uint256,uint8):((uint256,uint256,uint256[],uint256[]))",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GeneAuction__getCategoryVotingResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getGeneRemovalVotes(
    auctionId: BigInt,
    category: i32,
    geneId: BigInt,
  ): BigInt {
    let result = super.call(
      "getGeneRemovalVotes",
      "getGeneRemovalVotes(uint256,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
      ],
    );

    return result[0].toBigInt();
  }

  try_getGeneRemovalVotes(
    auctionId: BigInt,
    category: i32,
    geneId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGeneRemovalVotes",
      "getGeneRemovalVotes(uint256,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGeneVotes(auctionId: BigInt, category: i32, geneId: BigInt): BigInt {
    let result = super.call(
      "getGeneVotes",
      "getGeneVotes(uint256,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
      ],
    );

    return result[0].toBigInt();
  }

  try_getGeneVotes(
    auctionId: BigInt,
    category: i32,
    geneId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGeneVotes",
      "getGeneVotes(uint256,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParentTraits(auctionId: BigInt): GeneAuction__getParentTraitsResult {
    let result = super.call(
      "getParentTraits",
      "getParentTraits(uint256):(uint256[8],uint256[8])",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );

    return new GeneAuction__getParentTraitsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getParentTraits(
    auctionId: BigInt,
  ): ethereum.CallResult<GeneAuction__getParentTraitsResult> {
    let result = super.tryCall(
      "getParentTraits",
      "getParentTraits(uint256):(uint256[8],uint256[8])",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GeneAuction__getParentTraitsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getUserVote(
    auctionId: BigInt,
    category: i32,
    geneId: BigInt,
    user: Address,
  ): BigInt {
    let result = super.call(
      "getUserVote",
      "getUserVote(uint256,uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserVote(
    auctionId: BigInt,
    category: i32,
    geneId: BigInt,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserVote",
      "getUserVote(uint256,uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromUnsignedBigInt(geneId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserVotedGene(auctionId: BigInt, category: i32, user: Address): BigInt {
    let result = super.call(
      "getUserVotedGene",
      "getUserVotedGene(uint256,uint8,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserVotedGene(
    auctionId: BigInt,
    category: i32,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserVotedGene",
      "getUserVotedGene(uint256,uint8,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserVotingPower(auctionId: BigInt, user: Address): BigInt {
    let result = super.call(
      "getUserVotingPower",
      "getUserVotingPower(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUserVotingPower(
    auctionId: BigInt,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserVotingPower",
      "getUserVotingPower(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isVotingActive(auctionId: BigInt): boolean {
    let result = super.call(
      "isVotingActive",
      "isVotingActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );

    return result[0].toBoolean();
  }

  try_isVotingActive(auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVotingActive",
      "isVotingActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _Genes(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _geneRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BulkVoteOnGenesCall extends ethereum.Call {
  get inputs(): BulkVoteOnGenesCall__Inputs {
    return new BulkVoteOnGenesCall__Inputs(this);
  }

  get outputs(): BulkVoteOnGenesCall__Outputs {
    return new BulkVoteOnGenesCall__Outputs(this);
  }
}

export class BulkVoteOnGenesCall__Inputs {
  _call: BulkVoteOnGenesCall;

  constructor(call: BulkVoteOnGenesCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get geneIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BulkVoteOnGenesCall__Outputs {
  _call: BulkVoteOnGenesCall;

  constructor(call: BulkVoteOnGenesCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get aminalOne(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get aminalTwo(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalLove(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyStopCall extends ethereum.Call {
  get inputs(): EmergencyStopCall__Inputs {
    return new EmergencyStopCall__Inputs(this);
  }

  get outputs(): EmergencyStopCall__Outputs {
    return new EmergencyStopCall__Outputs(this);
  }
}

export class EmergencyStopCall__Inputs {
  _call: EmergencyStopCall;

  constructor(call: EmergencyStopCall) {
    this._call = call;
  }
}

export class EmergencyStopCall__Outputs {
  _call: EmergencyStopCall;

  constructor(call: EmergencyStopCall) {
    this._call = call;
  }
}

export class ProposeGeneCall extends ethereum.Call {
  get inputs(): ProposeGeneCall__Inputs {
    return new ProposeGeneCall__Inputs(this);
  }

  get outputs(): ProposeGeneCall__Outputs {
    return new ProposeGeneCall__Outputs(this);
  }
}

export class ProposeGeneCall__Inputs {
  _call: ProposeGeneCall;

  constructor(call: ProposeGeneCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ProposeGeneCall__Outputs {
  _call: ProposeGeneCall;

  constructor(call: ProposeGeneCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SettleAuctionCall extends ethereum.Call {
  get inputs(): SettleAuctionCall__Inputs {
    return new SettleAuctionCall__Inputs(this);
  }

  get outputs(): SettleAuctionCall__Outputs {
    return new SettleAuctionCall__Outputs(this);
  }
}

export class SettleAuctionCall__Inputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleAuctionCall__Outputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _aminalsContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _aminalFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VoteOnGeneCall extends ethereum.Call {
  get inputs(): VoteOnGeneCall__Inputs {
    return new VoteOnGeneCall__Inputs(this);
  }

  get outputs(): VoteOnGeneCall__Outputs {
    return new VoteOnGeneCall__Outputs(this);
  }
}

export class VoteOnGeneCall__Inputs {
  _call: VoteOnGeneCall;

  constructor(call: VoteOnGeneCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class VoteOnGeneCall__Outputs {
  _call: VoteOnGeneCall;

  constructor(call: VoteOnGeneCall) {
    this._call = call;
  }
}

export class VoteToRemoveGeneCall extends ethereum.Call {
  get inputs(): VoteToRemoveGeneCall__Inputs {
    return new VoteToRemoveGeneCall__Inputs(this);
  }

  get outputs(): VoteToRemoveGeneCall__Outputs {
    return new VoteToRemoveGeneCall__Outputs(this);
  }
}

export class VoteToRemoveGeneCall__Inputs {
  _call: VoteToRemoveGeneCall;

  constructor(call: VoteToRemoveGeneCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get geneId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get voteWeight(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class VoteToRemoveGeneCall__Outputs {
  _call: VoteToRemoveGeneCall;

  constructor(call: VoteToRemoveGeneCall) {
    this._call = call;
  }
}
