// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BreedableSet extends ethereum.Event {
  get params(): BreedableSet__Params {
    return new BreedableSet__Params(this);
  }
}

export class BreedableSet__Params {
  _event: BreedableSet;

  constructor(event: BreedableSet) {
    this._event = event;
  }

  get partner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class EnergyTransferred extends ethereum.Event {
  get params(): EnergyTransferred__Params {
    return new EnergyTransferred__Params(this);
  }
}

export class EnergyTransferred__Params {
  _event: EnergyTransferred;

  constructor(event: EnergyTransferred) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingEnergy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeedAminal extends ethereum.Event {
  get params(): FeedAminal__Params {
    return new FeedAminal__Params(this);
  }
}

export class FeedAminal__Params {
  _event: FeedAminal;

  constructor(event: FeedAminal) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loveGained(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get love(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalLove(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get energyGained(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get energy(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SkillCall extends ethereum.Event {
  get params(): SkillCall__Params {
    return new SkillCall__Params(this);
  }
}

export class SkillCall__Params {
  _event: SkillCall;

  constructor(event: SkillCall) {
    this._event = event;
  }

  get skillAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get squeakCost(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Squeak extends ethereum.Event {
  get params(): Squeak__Params {
    return new Squeak__Params(this);
  }
}

export class Squeak__Params {
  _event: Squeak;

  constructor(event: Squeak) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get love(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalLove(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get energy(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Aminal__constructTokenURIInputParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get image(): string {
    return this[2].toString();
  }

  get attributes(): string {
    return this[3].toString();
  }
}

export class Aminal__getAminalVisualsByIDResultValue0Struct extends ethereum.Tuple {
  get backId(): BigInt {
    return this[0].toBigInt();
  }

  get armId(): BigInt {
    return this[1].toBigInt();
  }

  get tailId(): BigInt {
    return this[2].toBigInt();
  }

  get earsId(): BigInt {
    return this[3].toBigInt();
  }

  get bodyId(): BigInt {
    return this[4].toBigInt();
  }

  get faceId(): BigInt {
    return this[5].toBigInt();
  }

  get mouthId(): BigInt {
    return this[6].toBigInt();
  }

  get miscId(): BigInt {
    return this[7].toBigInt();
  }
}

export class Aminal__getParentsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getMom(): Address {
    return this.value0;
  }

  getDad(): Address {
    return this.value1;
  }
}

export class Aminal__getVisualsResultValue0Struct extends ethereum.Tuple {
  get backId(): BigInt {
    return this[0].toBigInt();
  }

  get armId(): BigInt {
    return this[1].toBigInt();
  }

  get tailId(): BigInt {
    return this[2].toBigInt();
  }

  get earsId(): BigInt {
    return this[3].toBigInt();
  }

  get bodyId(): BigInt {
    return this[4].toBigInt();
  }

  get faceId(): BigInt {
    return this[5].toBigInt();
  }

  get mouthId(): BigInt {
    return this[6].toBigInt();
  }

  get miscId(): BigInt {
    return this[7].toBigInt();
  }
}

export class Aminal__visualsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getBackId(): BigInt {
    return this.value0;
  }

  getArmId(): BigInt {
    return this.value1;
  }

  getTailId(): BigInt {
    return this.value2;
  }

  getEarsId(): BigInt {
    return this.value3;
  }

  getBodyId(): BigInt {
    return this.value4;
  }

  getFaceId(): BigInt {
    return this.value5;
  }

  getMouthId(): BigInt {
    return this.value6;
  }

  getMiscId(): BigInt {
    return this.value7;
  }
}

export class Aminal extends ethereum.SmartContract {
  static bind(address: Address): Aminal {
    return new Aminal("Aminal", address);
  }

  aminalIndex(): BigInt {
    let result = super.call("aminalIndex", "aminalIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_aminalIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("aminalIndex", "aminalIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  breedableWith(param0: Address): boolean {
    let result = super.call("breedableWith", "breedableWith(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_breedableWith(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "breedableWith",
      "breedableWith(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  breeding(): boolean {
    let result = super.call("breeding", "breeding():(bool)", []);

    return result[0].toBoolean();
  }

  try_breeding(): ethereum.CallResult<boolean> {
    let result = super.tryCall("breeding", "breeding():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  constructTokenURI(
    params: Aminal__constructTokenURIInputParamsStruct,
  ): string {
    let result = super.call(
      "constructTokenURI",
      "constructTokenURI((string,string,string,string)):(string)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toString();
  }

  try_constructTokenURI(
    params: Aminal__constructTokenURIInputParamsStruct,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "constructTokenURI",
      "constructTokenURI((string,string,string,string)):(string)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  dadAddress(): Address {
    let result = super.call("dadAddress", "dadAddress():(address)", []);

    return result[0].toAddress();
  }

  try_dadAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("dadAddress", "dadAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dataURI(tokenId: BigInt): string {
    let result = super.call("dataURI", "dataURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_dataURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("dataURI", "dataURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  geneFactory(): Address {
    let result = super.call("geneFactory", "geneFactory():(address)", []);

    return result[0].toAddress();
  }

  try_geneFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("geneFactory", "geneFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  generateAttributesList(aminalId: BigInt): string {
    let result = super.call(
      "generateAttributesList",
      "generateAttributesList(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(aminalId)],
    );

    return result[0].toString();
  }

  try_generateAttributesList(aminalId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "generateAttributesList",
      "generateAttributesList(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(aminalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  genesNFT(): Address {
    let result = super.call("genesNFT", "genesNFT():(address)", []);

    return result[0].toAddress();
  }

  try_genesNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("genesNFT", "genesNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAminalVisualsByID(
    aminalID: BigInt,
  ): Aminal__getAminalVisualsByIDResultValue0Struct {
    let result = super.call(
      "getAminalVisualsByID",
      "getAminalVisualsByID(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(aminalID)],
    );

    return changetype<Aminal__getAminalVisualsByIDResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getAminalVisualsByID(
    aminalID: BigInt,
  ): ethereum.CallResult<Aminal__getAminalVisualsByIDResultValue0Struct> {
    let result = super.tryCall(
      "getAminalVisualsByID",
      "getAminalVisualsByID(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(aminalID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Aminal__getAminalVisualsByIDResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEnergy(): BigInt {
    let result = super.call("getEnergy", "getEnergy():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEnergy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEnergy", "getEnergy():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoveByUser(user: Address): BigInt {
    let result = super.call(
      "getLoveByUser",
      "getLoveByUser(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getLoveByUser(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLoveByUser",
      "getLoveByUser(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParents(): Aminal__getParentsResult {
    let result = super.call("getParents", "getParents():(address,address)", []);

    return new Aminal__getParentsResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_getParents(): ethereum.CallResult<Aminal__getParentsResult> {
    let result = super.tryCall(
      "getParents",
      "getParents():(address,address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Aminal__getParentsResult(value[0].toAddress(), value[1].toAddress()),
    );
  }

  getSkillProperty(skill: Address, key: string): Bytes {
    let result = super.call(
      "getSkillProperty",
      "getSkillProperty(address,string):(bytes32)",
      [ethereum.Value.fromAddress(skill), ethereum.Value.fromString(key)],
    );

    return result[0].toBytes();
  }

  try_getSkillProperty(
    skill: Address,
    key: string,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSkillProperty",
      "getSkillProperty(address,string):(bytes32)",
      [ethereum.Value.fromAddress(skill), ethereum.Value.fromString(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalLove(): BigInt {
    let result = super.call("getTotalLove", "getTotalLove():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalLove(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTotalLove", "getTotalLove():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVisuals(): Aminal__getVisualsResultValue0Struct {
    let result = super.call(
      "getVisuals",
      "getVisuals():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );

    return changetype<Aminal__getVisualsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getVisuals(): ethereum.CallResult<Aminal__getVisualsResultValue0Struct> {
    let result = super.tryCall(
      "getVisuals",
      "getVisuals():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Aminal__getVisualsResultValue0Struct>(value[0].toTuple()),
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBreedableWith(partner: Address): boolean {
    let result = super.call(
      "isBreedableWith",
      "isBreedableWith(address):(bool)",
      [ethereum.Value.fromAddress(partner)],
    );

    return result[0].toBoolean();
  }

  try_isBreedableWith(partner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBreedableWith",
      "isBreedableWith(address):(bool)",
      [ethereum.Value.fromAddress(partner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loveDrivenPrice(user: Address): BigInt {
    let result = super.call(
      "loveDrivenPrice",
      "loveDrivenPrice(address):(uint128)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_loveDrivenPrice(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loveDrivenPrice",
      "loveDrivenPrice(address):(uint128)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lovePerUser(user: Address): BigInt {
    let result = super.call("lovePerUser", "lovePerUser(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_lovePerUser(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lovePerUser",
      "lovePerUser(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loveVRGDA(): Address {
    let result = super.call("loveVRGDA", "loveVRGDA():(address)", []);

    return result[0].toAddress();
  }

  try_loveVRGDA(): ethereum.CallResult<Address> {
    let result = super.tryCall("loveVRGDA", "loveVRGDA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  momAddress(): Address {
    let result = super.call("momAddress", "momAddress():(address)", []);

    return result[0].toAddress();
  }

  try_momAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("momAddress", "momAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  skillProperties(skill: Address, key: string): Bytes {
    let result = super.call(
      "skillProperties",
      "skillProperties(address,string):(bytes32)",
      [ethereum.Value.fromAddress(skill), ethereum.Value.fromString(key)],
    );

    return result[0].toBytes();
  }

  try_skillProperties(skill: Address, key: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "skillProperties",
      "skillProperties(address,string):(bytes32)",
      [ethereum.Value.fromAddress(skill), ethereum.Value.fromString(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  visuals(): Aminal__visualsResult {
    let result = super.call(
      "visuals",
      "visuals():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );

    return new Aminal__visualsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
    );
  }

  try_visuals(): ethereum.CallResult<Aminal__visualsResult> {
    let result = super.tryCall(
      "visuals",
      "visuals():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Aminal__visualsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _momAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _dadAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _visuals(): ConstructorCall_visualsStruct {
    return changetype<ConstructorCall_visualsStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }

  get _aminalIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _loveVRGDA(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_visualsStruct extends ethereum.Tuple {
  get backId(): BigInt {
    return this[0].toBigInt();
  }

  get armId(): BigInt {
    return this[1].toBigInt();
  }

  get tailId(): BigInt {
    return this[2].toBigInt();
  }

  get earsId(): BigInt {
    return this[3].toBigInt();
  }

  get bodyId(): BigInt {
    return this[4].toBigInt();
  }

  get faceId(): BigInt {
    return this[5].toBigInt();
  }

  get mouthId(): BigInt {
    return this[6].toBigInt();
  }

  get miscId(): BigInt {
    return this[7].toBigInt();
  }
}

export class CallSkillCall extends ethereum.Call {
  get inputs(): CallSkillCall__Inputs {
    return new CallSkillCall__Inputs(this);
  }

  get outputs(): CallSkillCall__Outputs {
    return new CallSkillCall__Outputs(this);
  }
}

export class CallSkillCall__Inputs {
  _call: CallSkillCall;

  constructor(call: CallSkillCall) {
    this._call = call;
  }

  get skillAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CallSkillCall__Outputs {
  _call: CallSkillCall;

  constructor(call: CallSkillCall) {
    this._call = call;
  }
}

export class DisableBreedableWithCall extends ethereum.Call {
  get inputs(): DisableBreedableWithCall__Inputs {
    return new DisableBreedableWithCall__Inputs(this);
  }

  get outputs(): DisableBreedableWithCall__Outputs {
    return new DisableBreedableWithCall__Outputs(this);
  }
}

export class DisableBreedableWithCall__Inputs {
  _call: DisableBreedableWithCall;

  constructor(call: DisableBreedableWithCall) {
    this._call = call;
  }

  get partner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableBreedableWithCall__Outputs {
  _call: DisableBreedableWithCall;

  constructor(call: DisableBreedableWithCall) {
    this._call = call;
  }
}

export class FeedCall extends ethereum.Call {
  get inputs(): FeedCall__Inputs {
    return new FeedCall__Inputs(this);
  }

  get outputs(): FeedCall__Outputs {
    return new FeedCall__Outputs(this);
  }
}

export class FeedCall__Inputs {
  _call: FeedCall;

  constructor(call: FeedCall) {
    this._call = call;
  }
}

export class FeedCall__Outputs {
  _call: FeedCall;

  constructor(call: FeedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBreedableWithCall extends ethereum.Call {
  get inputs(): SetBreedableWithCall__Inputs {
    return new SetBreedableWithCall__Inputs(this);
  }

  get outputs(): SetBreedableWithCall__Outputs {
    return new SetBreedableWithCall__Outputs(this);
  }
}

export class SetBreedableWithCall__Inputs {
  _call: SetBreedableWithCall;

  constructor(call: SetBreedableWithCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get partner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetBreedableWithCall__Outputs {
  _call: SetBreedableWithCall;

  constructor(call: SetBreedableWithCall) {
    this._call = call;
  }
}

export class SetBreedingCall extends ethereum.Call {
  get inputs(): SetBreedingCall__Inputs {
    return new SetBreedingCall__Inputs(this);
  }

  get outputs(): SetBreedingCall__Outputs {
    return new SetBreedingCall__Outputs(this);
  }
}

export class SetBreedingCall__Inputs {
  _call: SetBreedingCall;

  constructor(call: SetBreedingCall) {
    this._call = call;
  }

  get _breeding(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBreedingCall__Outputs {
  _call: SetBreedingCall;

  constructor(call: SetBreedingCall) {
    this._call = call;
  }
}

export class SetSkillPropertyCall extends ethereum.Call {
  get inputs(): SetSkillPropertyCall__Inputs {
    return new SetSkillPropertyCall__Inputs(this);
  }

  get outputs(): SetSkillPropertyCall__Outputs {
    return new SetSkillPropertyCall__Outputs(this);
  }
}

export class SetSkillPropertyCall__Inputs {
  _call: SetSkillPropertyCall;

  constructor(call: SetSkillPropertyCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetSkillPropertyCall__Outputs {
  _call: SetSkillPropertyCall;

  constructor(call: SetSkillPropertyCall) {
    this._call = call;
  }
}

export class SqueakCall extends ethereum.Call {
  get inputs(): SqueakCall__Inputs {
    return new SqueakCall__Inputs(this);
  }

  get outputs(): SqueakCall__Outputs {
    return new SqueakCall__Outputs(this);
  }
}

export class SqueakCall__Inputs {
  _call: SqueakCall;

  constructor(call: SqueakCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SqueakCall__Outputs {
  _call: SqueakCall;

  constructor(call: SqueakCall) {
    this._call = call;
  }
}

export class TransferEnergyToOwnerCall extends ethereum.Call {
  get inputs(): TransferEnergyToOwnerCall__Inputs {
    return new TransferEnergyToOwnerCall__Inputs(this);
  }

  get outputs(): TransferEnergyToOwnerCall__Outputs {
    return new TransferEnergyToOwnerCall__Outputs(this);
  }
}

export class TransferEnergyToOwnerCall__Inputs {
  _call: TransferEnergyToOwnerCall;

  constructor(call: TransferEnergyToOwnerCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferEnergyToOwnerCall__Outputs {
  _call: TransferEnergyToOwnerCall;

  constructor(call: TransferEnergyToOwnerCall) {
    this._call = call;
  }
}
