// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class GeneCreated extends ethereum.Event {
  get params(): GeneCreated__Params {
    return new GeneCreated__Params(this);
  }
}

export class GeneCreated__Params {
  _event: GeneCreated;

  constructor(event: GeneCreated) {
    this._event = event;
  }

  get geneId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get category(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get svg(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GeneRegistry__getGeneInfoResult {
  value0: Address;
  value1: i32;
  value2: string;

  constructor(value0: Address, value1: i32, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getCategory(): i32 {
    return this.value1;
  }

  getSvg(): string {
    return this.value2;
  }
}

export class GeneRegistry extends ethereum.SmartContract {
  static bind(address: Address): GeneRegistry {
    return new GeneRegistry("GeneRegistry", address);
  }

  MAX_SVG_LENGTH(): BigInt {
    let result = super.call("MAX_SVG_LENGTH", "MAX_SVG_LENGTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SVG_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SVG_LENGTH",
      "MAX_SVG_LENGTH():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createGene(svg: string, category: i32): BigInt {
    let result = super.call(
      "createGene",
      "createGene(string,uint8):(uint256)",
      [
        ethereum.Value.fromString(svg),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
      ],
    );

    return result[0].toBigInt();
  }

  try_createGene(svg: string, category: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createGene",
      "createGene(string,uint8):(uint256)",
      [
        ethereum.Value.fromString(svg),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  geneCategories(geneId: BigInt): i32 {
    let result = super.call(
      "geneCategories",
      "geneCategories(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(geneId)],
    );

    return result[0].toI32();
  }

  try_geneCategories(geneId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "geneCategories",
      "geneCategories(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(geneId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  geneCreators(geneId: BigInt): Address {
    let result = super.call("geneCreators", "geneCreators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);

    return result[0].toAddress();
  }

  try_geneCreators(geneId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "geneCreators",
      "geneCreators(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(geneId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  geneNFT(): Address {
    let result = super.call("geneNFT", "geneNFT():(address)", []);

    return result[0].toAddress();
  }

  try_geneNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("geneNFT", "geneNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  geneRegistry(geneId: BigInt): boolean {
    let result = super.call("geneRegistry", "geneRegistry(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);

    return result[0].toBoolean();
  }

  try_geneRegistry(geneId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("geneRegistry", "geneRegistry(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  geneSVGs(geneId: BigInt): string {
    let result = super.call("geneSVGs", "geneSVGs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);

    return result[0].toString();
  }

  try_geneSVGs(geneId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("geneSVGs", "geneSVGs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getGeneInfo(geneId: BigInt): GeneRegistry__getGeneInfoResult {
    let result = super.call(
      "getGeneInfo",
      "getGeneInfo(uint256):(address,uint8,string)",
      [ethereum.Value.fromUnsignedBigInt(geneId)],
    );

    return new GeneRegistry__getGeneInfoResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toString(),
    );
  }

  try_getGeneInfo(
    geneId: BigInt,
  ): ethereum.CallResult<GeneRegistry__getGeneInfoResult> {
    let result = super.tryCall(
      "getGeneInfo",
      "getGeneInfo(uint256):(address,uint8,string)",
      [ethereum.Value.fromUnsignedBigInt(geneId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GeneRegistry__getGeneInfoResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toString(),
      ),
    );
  }

  getGenesByCategory(category: i32): Array<BigInt> {
    let result = super.call(
      "getGenesByCategory",
      "getGenesByCategory(uint8):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category))],
    );

    return result[0].toBigIntArray();
  }

  try_getGenesByCategory(category: i32): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getGenesByCategory",
      "getGenesByCategory(uint8):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(category))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getGenesByCreator(creator: Address): Array<BigInt> {
    let result = super.call(
      "getGenesByCreator",
      "getGenesByCreator(address):(uint256[])",
      [ethereum.Value.fromAddress(creator)],
    );

    return result[0].toBigIntArray();
  }

  try_getGenesByCreator(creator: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getGenesByCreator",
      "getGenesByCreator(address):(uint256[])",
      [ethereum.Value.fromAddress(creator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isValidGene(geneId: BigInt): boolean {
    let result = super.call("isValidGene", "isValidGene(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);

    return result[0].toBoolean();
  }

  try_isValidGene(geneId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidGene", "isValidGene(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(geneId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalGenesCreated(): BigInt {
    let result = super.call(
      "totalGenesCreated",
      "totalGenesCreated():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalGenesCreated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGenesCreated",
      "totalGenesCreated():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _geneNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateGeneCall extends ethereum.Call {
  get inputs(): CreateGeneCall__Inputs {
    return new CreateGeneCall__Inputs(this);
  }

  get outputs(): CreateGeneCall__Outputs {
    return new CreateGeneCall__Outputs(this);
  }
}

export class CreateGeneCall__Inputs {
  _call: CreateGeneCall;

  constructor(call: CreateGeneCall) {
    this._call = call;
  }

  get svg(): string {
    return this._call.inputValues[0].value.toString();
  }

  get category(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CreateGeneCall__Outputs {
  _call: CreateGeneCall;

  constructor(call: CreateGeneCall) {
    this._call = call;
  }

  get geneId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
