type AminalFactory @entity(immutable: false) {
  id: Bytes! # Factory contract address
  totalAminals: BigInt!
  geneAuction: Bytes! # GeneAuction contract address
  genesNFT: Bytes! # GenesNFT contract address
  loveVRGDA: Bytes! # Love VRGDA contract address
  initialAminalSpawned: Boolean!
  
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  
  # Derived relationships
  aminals: [Aminal!]! @derivedFrom(field: "factory")
}

type Aminal @entity(immutable: false) {
  id: Bytes! # Contract address
  contractAddress: Bytes! # Contract address (same as id)
  aminalIndex: BigInt! # Index in factory
  factory: AminalFactory! # Factory that created this Aminal
  
  # Parent relationships (addresses, not indices)
  momAddress: Bytes # Mother Aminal contract address (null for genesis)
  dadAddress: Bytes # Father Aminal contract address (null for genesis)
  mother: Aminal # Mother Aminal entity
  father: Aminal # Father Aminal entity
  children: [Aminal!]! @derivedFrom(field: "mother")
  
  # Visual traits (Gene NFT IDs)
  backId: BigInt!
  armId: BigInt!
  tailId: BigInt!
  earsId: BigInt!
  bodyId: BigInt!
  faceId: BigInt!
  mouthId: BigInt!
  miscId: BigInt!
  
  # State
  energy: BigInt!
  totalLove: BigInt!
  breeding: Boolean!
  
  # Breeding consent (derived from events)
  breedableWith: [BreedingConsent!]! @derivedFrom(field: "aminal")
  
  # Relationships
  lovers: [Relationship]! @derivedFrom(field: "aminal")
  
  # Skills and activities
  skillCalls: [SkillCall!]! @derivedFrom(field: "aminal")
  squeaks: [Squeak!]! @derivedFrom(field: "aminal")
  feeds: [FeedAminalEvent!]! @derivedFrom(field: "aminal")
  
  # Breeding activities
  breedingEventsAsParentOne: [BreedAminalEvent!]! @derivedFrom(field: "aminalOne")
  breedingEventsAsParentTwo: [BreedAminalEvent!]! @derivedFrom(field: "aminalTwo")
  auctions: [GeneAuction!]! @derivedFrom(field: "aminalOne")
  
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity(immutable: false) {
  id: Bytes!
  address: Bytes! # address
  lovers: [Relationship]! @derivedFrom(field: "user")
  geneProposals: [GeneProposal]! @derivedFrom(field: "proposer")
  genesCreated: [GeneNFT]! @derivedFrom(field: "creator")
  genesOwned: [GeneNFT]! @derivedFrom(field: "owner")
  geneVotes: [GeneVote]! @derivedFrom(field: "voter")
}

type Relationship @entity(immutable: false) {
  id: Bytes!
  user: User!
  aminal: Aminal!
  love: BigInt!
}

# Remove old Trait entity as it's replaced by GeneNFT

type BreedingConsent @entity(immutable: false) {
  id: Bytes! # aminal address + partner address
  aminal: Aminal!
  partner: Aminal!
  consented: Boolean!
  
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BreedAminalEvent @entity(immutable: true) {
  id: Bytes!
  aminalOne: Aminal! # Parent 1 address
  aminalTwo: Aminal! # Parent 2 address
  auctionId: BigInt! # Gene auction ID (0 if just setting consent)
  auction: GeneAuction # Related auction entity
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeedAminalEvent @entity(immutable: true) {
  id: Bytes!
  aminal: Aminal! # Contract address
  sender: User! # Feeder address
  amount: BigInt! # ETH amount
  love: BigInt! # Love gained by user
  totalLove: BigInt! # Total love for Aminal
  energy: BigInt! # Energy after feeding
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkillCall @entity(immutable: true) {
  id: Bytes!
  aminal: Aminal! # Aminal contract that called skill
  caller: User! # User who initiated the skill call
  skillAddress: Bytes! # Skill contract address
  data: Bytes! # Encoded skill parameters
  squeakCost: BigInt! # Energy cost for the skill
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GlobalSkill @entity(immutable: false) {
  id: Bytes! # Skill contract address
  skillAddress: Bytes! # Skill contract address
  name: String # Skill name if available
  
  # Usage statistics
  callCount: BigInt!
  totalSqueakCost: BigInt!
  
  # Derived relationships - removed due to type mismatch
  # calls: [SkillCall!]! @derivedFrom(field: "skillAddress")
  
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Remove SkillProposal and SkillVote entities as skills are now globally accessible

type Squeak @entity(immutable: true) {
  id: Bytes!
  aminal: Aminal! # Aminal contract that squeaked
  sender: User! # User who triggered the squeak
  amount: BigInt! # Love amount used
  love: BigInt! # Love remaining for user
  totalLove: BigInt! # Total love for Aminal
  energy: BigInt! # Energy after squeak
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GeneAuction @entity(immutable: false) {
  id: Bytes! # Auction ID
  auctionId: BigInt!
  aminalOne: Aminal! # Parent 1
  aminalTwo: Aminal! # Parent 2
  totalLove: BigInt! # Combined love for voting power
  finished: Boolean!
  
  # Result data
  childAminal: Aminal # Spawned child (when auction completes)
  winningGeneIds: [BigInt!] # Winning gene IDs [8]
  
  # Gene proposals and votes
  proposals: [GeneProposal!]! @derivedFrom(field: "auction")
  votes: [GeneVote!]! @derivedFrom(field: "auction")
  
  # Timing
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  endBlockNumber: BigInt
  endBlockTimestamp: BigInt
  endTransactionHash: Bytes
}

type GeneNFT @entity(immutable: false) {
  id: Bytes! # Gene NFT contract address + token ID
  tokenId: BigInt!
  traitType: Int! # 0-7 for different trait categories
  owner: User!
  creator: User!
  
  # Metadata
  svg: String
  name: String
  description: String
  
  # Usage in Aminals
  aminalsUsingGene: [Aminal!]! # Aminals that have this gene
  
  # Auction usage
  proposalsUsingGene: [GeneProposal!]! @derivedFrom(field: "geneNFT")
  
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GeneProposal @entity(immutable: false) {
  id: Bytes! # auction ID + trait type + gene ID
  auction: GeneAuction!
  geneNFT: GeneNFT!
  traitType: Int! # 0-7 for different trait categories
  proposer: User!
  
  # Voting stats
  loveVotes: BigInt!
  removeVotes: BigInt!
  removed: Boolean!
  
  # Votes for this proposal
  votes: [GeneVote!]! @derivedFrom(field: "proposal")
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GeneVote @entity(immutable: true) {
  id: Bytes!
  auction: GeneAuction!
  proposal: GeneProposal!
  voter: User!
  
  # Vote details
  isRemoveVote: Boolean!
  loveAmount: BigInt!
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
