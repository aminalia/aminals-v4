schema {
  query: Query
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Aminal {
  id: Bytes!
  contractAddress: Bytes!
  aminalIndex: BigInt!
  factory: AminalFactory!
  parentOne: Aminal
  parentTwo: Aminal
  auctionId: BigInt
  childrenAsParentOne(skip: Int = 0, first: Int = 100, orderBy: Aminal_orderBy, orderDirection: OrderDirection, where: Aminal_filter): [Aminal!]!
  childrenAsParentTwo(skip: Int = 0, first: Int = 100, orderBy: Aminal_orderBy, orderDirection: OrderDirection, where: Aminal_filter): [Aminal!]!
  backId: BigInt!
  armId: BigInt!
  tailId: BigInt!
  earsId: BigInt!
  bodyId: BigInt!
  faceId: BigInt!
  mouthId: BigInt!
  miscId: BigInt!
  tokenURI: String
  energy: BigInt!
  totalLove: BigInt!
  ethBalance: BigInt!
  lovers(skip: Int = 0, first: Int = 100, orderBy: Relationship_orderBy, orderDirection: OrderDirection, where: Relationship_filter): [Relationship]!
  skillUsed(skip: Int = 0, first: Int = 100, orderBy: SkillUsed_orderBy, orderDirection: OrderDirection, where: SkillUsed_filter): [SkillUsed!]!
  feeds(skip: Int = 0, first: Int = 100, orderBy: FeedAminalEvent_orderBy, orderDirection: OrderDirection, where: FeedAminalEvent_filter): [FeedAminalEvent!]!
  breedingEventsAsParentOne(skip: Int = 0, first: Int = 100, orderBy: BreedAminalEvent_orderBy, orderDirection: OrderDirection, where: BreedAminalEvent_filter): [BreedAminalEvent!]!
  breedingEventsAsParentTwo(skip: Int = 0, first: Int = 100, orderBy: BreedAminalEvent_orderBy, orderDirection: OrderDirection, where: BreedAminalEvent_filter): [BreedAminalEvent!]!
  auctions(skip: Int = 0, first: Int = 100, orderBy: GeneAuction_orderBy, orderDirection: OrderDirection, where: GeneAuction_filter): [GeneAuction!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AminalFactory {
  id: Bytes!
  totalAminals: BigInt!
  geneAuction: Bytes!
  genes: Bytes!
  loveVRGDA: Bytes!
  initialAminalSpawned: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  aminals(skip: Int = 0, first: Int = 100, orderBy: Aminal_orderBy, orderDirection: OrderDirection, where: Aminal_filter): [Aminal!]!
}

input AminalFactory_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  totalAminals: BigInt
  totalAminals_not: BigInt
  totalAminals_gt: BigInt
  totalAminals_lt: BigInt
  totalAminals_gte: BigInt
  totalAminals_lte: BigInt
  totalAminals_in: [BigInt!]
  totalAminals_not_in: [BigInt!]
  geneAuction: Bytes
  geneAuction_not: Bytes
  geneAuction_gt: Bytes
  geneAuction_lt: Bytes
  geneAuction_gte: Bytes
  geneAuction_lte: Bytes
  geneAuction_in: [Bytes!]
  geneAuction_not_in: [Bytes!]
  geneAuction_contains: Bytes
  geneAuction_not_contains: Bytes
  genes: Bytes
  genes_not: Bytes
  genes_gt: Bytes
  genes_lt: Bytes
  genes_gte: Bytes
  genes_lte: Bytes
  genes_in: [Bytes!]
  genes_not_in: [Bytes!]
  genes_contains: Bytes
  genes_not_contains: Bytes
  loveVRGDA: Bytes
  loveVRGDA_not: Bytes
  loveVRGDA_gt: Bytes
  loveVRGDA_lt: Bytes
  loveVRGDA_gte: Bytes
  loveVRGDA_lte: Bytes
  loveVRGDA_in: [Bytes!]
  loveVRGDA_not_in: [Bytes!]
  loveVRGDA_contains: Bytes
  loveVRGDA_not_contains: Bytes
  initialAminalSpawned: Boolean
  initialAminalSpawned_not: Boolean
  initialAminalSpawned_in: [Boolean!]
  initialAminalSpawned_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  aminals_: Aminal_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AminalFactory_filter]
  or: [AminalFactory_filter]
}

enum AminalFactory_orderBy {
  id
  totalAminals
  geneAuction
  genes
  loveVRGDA
  initialAminalSpawned
  blockNumber
  blockTimestamp
  transactionHash
  aminals
}

input Aminal_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  contractAddress: Bytes
  contractAddress_not: Bytes
  contractAddress_gt: Bytes
  contractAddress_lt: Bytes
  contractAddress_gte: Bytes
  contractAddress_lte: Bytes
  contractAddress_in: [Bytes!]
  contractAddress_not_in: [Bytes!]
  contractAddress_contains: Bytes
  contractAddress_not_contains: Bytes
  aminalIndex: BigInt
  aminalIndex_not: BigInt
  aminalIndex_gt: BigInt
  aminalIndex_lt: BigInt
  aminalIndex_gte: BigInt
  aminalIndex_lte: BigInt
  aminalIndex_in: [BigInt!]
  aminalIndex_not_in: [BigInt!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: AminalFactory_filter
  parentOne: String
  parentOne_not: String
  parentOne_gt: String
  parentOne_lt: String
  parentOne_gte: String
  parentOne_lte: String
  parentOne_in: [String!]
  parentOne_not_in: [String!]
  parentOne_contains: String
  parentOne_contains_nocase: String
  parentOne_not_contains: String
  parentOne_not_contains_nocase: String
  parentOne_starts_with: String
  parentOne_starts_with_nocase: String
  parentOne_not_starts_with: String
  parentOne_not_starts_with_nocase: String
  parentOne_ends_with: String
  parentOne_ends_with_nocase: String
  parentOne_not_ends_with: String
  parentOne_not_ends_with_nocase: String
  parentOne_: Aminal_filter
  parentTwo: String
  parentTwo_not: String
  parentTwo_gt: String
  parentTwo_lt: String
  parentTwo_gte: String
  parentTwo_lte: String
  parentTwo_in: [String!]
  parentTwo_not_in: [String!]
  parentTwo_contains: String
  parentTwo_contains_nocase: String
  parentTwo_not_contains: String
  parentTwo_not_contains_nocase: String
  parentTwo_starts_with: String
  parentTwo_starts_with_nocase: String
  parentTwo_not_starts_with: String
  parentTwo_not_starts_with_nocase: String
  parentTwo_ends_with: String
  parentTwo_ends_with_nocase: String
  parentTwo_not_ends_with: String
  parentTwo_not_ends_with_nocase: String
  parentTwo_: Aminal_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  childrenAsParentOne_: Aminal_filter
  childrenAsParentTwo_: Aminal_filter
  backId: BigInt
  backId_not: BigInt
  backId_gt: BigInt
  backId_lt: BigInt
  backId_gte: BigInt
  backId_lte: BigInt
  backId_in: [BigInt!]
  backId_not_in: [BigInt!]
  armId: BigInt
  armId_not: BigInt
  armId_gt: BigInt
  armId_lt: BigInt
  armId_gte: BigInt
  armId_lte: BigInt
  armId_in: [BigInt!]
  armId_not_in: [BigInt!]
  tailId: BigInt
  tailId_not: BigInt
  tailId_gt: BigInt
  tailId_lt: BigInt
  tailId_gte: BigInt
  tailId_lte: BigInt
  tailId_in: [BigInt!]
  tailId_not_in: [BigInt!]
  earsId: BigInt
  earsId_not: BigInt
  earsId_gt: BigInt
  earsId_lt: BigInt
  earsId_gte: BigInt
  earsId_lte: BigInt
  earsId_in: [BigInt!]
  earsId_not_in: [BigInt!]
  bodyId: BigInt
  bodyId_not: BigInt
  bodyId_gt: BigInt
  bodyId_lt: BigInt
  bodyId_gte: BigInt
  bodyId_lte: BigInt
  bodyId_in: [BigInt!]
  bodyId_not_in: [BigInt!]
  faceId: BigInt
  faceId_not: BigInt
  faceId_gt: BigInt
  faceId_lt: BigInt
  faceId_gte: BigInt
  faceId_lte: BigInt
  faceId_in: [BigInt!]
  faceId_not_in: [BigInt!]
  mouthId: BigInt
  mouthId_not: BigInt
  mouthId_gt: BigInt
  mouthId_lt: BigInt
  mouthId_gte: BigInt
  mouthId_lte: BigInt
  mouthId_in: [BigInt!]
  mouthId_not_in: [BigInt!]
  miscId: BigInt
  miscId_not: BigInt
  miscId_gt: BigInt
  miscId_lt: BigInt
  miscId_gte: BigInt
  miscId_lte: BigInt
  miscId_in: [BigInt!]
  miscId_not_in: [BigInt!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  energy: BigInt
  energy_not: BigInt
  energy_gt: BigInt
  energy_lt: BigInt
  energy_gte: BigInt
  energy_lte: BigInt
  energy_in: [BigInt!]
  energy_not_in: [BigInt!]
  totalLove: BigInt
  totalLove_not: BigInt
  totalLove_gt: BigInt
  totalLove_lt: BigInt
  totalLove_gte: BigInt
  totalLove_lte: BigInt
  totalLove_in: [BigInt!]
  totalLove_not_in: [BigInt!]
  ethBalance: BigInt
  ethBalance_not: BigInt
  ethBalance_gt: BigInt
  ethBalance_lt: BigInt
  ethBalance_gte: BigInt
  ethBalance_lte: BigInt
  ethBalance_in: [BigInt!]
  ethBalance_not_in: [BigInt!]
  lovers_: Relationship_filter
  skillUsed_: SkillUsed_filter
  feeds_: FeedAminalEvent_filter
  breedingEventsAsParentOne_: BreedAminalEvent_filter
  breedingEventsAsParentTwo_: BreedAminalEvent_filter
  auctions_: GeneAuction_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Aminal_filter]
  or: [Aminal_filter]
}

enum Aminal_orderBy {
  id
  contractAddress
  aminalIndex
  factory
  factory__id
  factory__totalAminals
  factory__geneAuction
  factory__genes
  factory__loveVRGDA
  factory__initialAminalSpawned
  factory__blockNumber
  factory__blockTimestamp
  factory__transactionHash
  parentOne
  parentOne__id
  parentOne__contractAddress
  parentOne__aminalIndex
  parentOne__auctionId
  parentOne__backId
  parentOne__armId
  parentOne__tailId
  parentOne__earsId
  parentOne__bodyId
  parentOne__faceId
  parentOne__mouthId
  parentOne__miscId
  parentOne__tokenURI
  parentOne__energy
  parentOne__totalLove
  parentOne__ethBalance
  parentOne__blockNumber
  parentOne__blockTimestamp
  parentOne__transactionHash
  parentTwo
  parentTwo__id
  parentTwo__contractAddress
  parentTwo__aminalIndex
  parentTwo__auctionId
  parentTwo__backId
  parentTwo__armId
  parentTwo__tailId
  parentTwo__earsId
  parentTwo__bodyId
  parentTwo__faceId
  parentTwo__mouthId
  parentTwo__miscId
  parentTwo__tokenURI
  parentTwo__energy
  parentTwo__totalLove
  parentTwo__ethBalance
  parentTwo__blockNumber
  parentTwo__blockTimestamp
  parentTwo__transactionHash
  auctionId
  childrenAsParentOne
  childrenAsParentTwo
  backId
  armId
  tailId
  earsId
  bodyId
  faceId
  mouthId
  miscId
  tokenURI
  energy
  totalLove
  ethBalance
  lovers
  skillUsed
  feeds
  breedingEventsAsParentOne
  breedingEventsAsParentTwo
  auctions
  blockNumber
  blockTimestamp
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type BreedAminalEvent {
  id: Bytes!
  aminalOne: Aminal!
  aminalTwo: Aminal!
  auctionId: BigInt!
  auction: GeneAuction
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input BreedAminalEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  aminalOne: String
  aminalOne_not: String
  aminalOne_gt: String
  aminalOne_lt: String
  aminalOne_gte: String
  aminalOne_lte: String
  aminalOne_in: [String!]
  aminalOne_not_in: [String!]
  aminalOne_contains: String
  aminalOne_contains_nocase: String
  aminalOne_not_contains: String
  aminalOne_not_contains_nocase: String
  aminalOne_starts_with: String
  aminalOne_starts_with_nocase: String
  aminalOne_not_starts_with: String
  aminalOne_not_starts_with_nocase: String
  aminalOne_ends_with: String
  aminalOne_ends_with_nocase: String
  aminalOne_not_ends_with: String
  aminalOne_not_ends_with_nocase: String
  aminalOne_: Aminal_filter
  aminalTwo: String
  aminalTwo_not: String
  aminalTwo_gt: String
  aminalTwo_lt: String
  aminalTwo_gte: String
  aminalTwo_lte: String
  aminalTwo_in: [String!]
  aminalTwo_not_in: [String!]
  aminalTwo_contains: String
  aminalTwo_contains_nocase: String
  aminalTwo_not_contains: String
  aminalTwo_not_contains_nocase: String
  aminalTwo_starts_with: String
  aminalTwo_starts_with_nocase: String
  aminalTwo_not_starts_with: String
  aminalTwo_not_starts_with_nocase: String
  aminalTwo_ends_with: String
  aminalTwo_ends_with_nocase: String
  aminalTwo_not_ends_with: String
  aminalTwo_not_ends_with_nocase: String
  aminalTwo_: Aminal_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: GeneAuction_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BreedAminalEvent_filter]
  or: [BreedAminalEvent_filter]
}

enum BreedAminalEvent_orderBy {
  id
  aminalOne
  aminalOne__id
  aminalOne__contractAddress
  aminalOne__aminalIndex
  aminalOne__auctionId
  aminalOne__backId
  aminalOne__armId
  aminalOne__tailId
  aminalOne__earsId
  aminalOne__bodyId
  aminalOne__faceId
  aminalOne__mouthId
  aminalOne__miscId
  aminalOne__tokenURI
  aminalOne__energy
  aminalOne__totalLove
  aminalOne__ethBalance
  aminalOne__blockNumber
  aminalOne__blockTimestamp
  aminalOne__transactionHash
  aminalTwo
  aminalTwo__id
  aminalTwo__contractAddress
  aminalTwo__aminalIndex
  aminalTwo__auctionId
  aminalTwo__backId
  aminalTwo__armId
  aminalTwo__tailId
  aminalTwo__earsId
  aminalTwo__bodyId
  aminalTwo__faceId
  aminalTwo__mouthId
  aminalTwo__miscId
  aminalTwo__tokenURI
  aminalTwo__energy
  aminalTwo__totalLove
  aminalTwo__ethBalance
  aminalTwo__blockNumber
  aminalTwo__blockTimestamp
  aminalTwo__transactionHash
  auctionId
  auction
  auction__id
  auction__auctionId
  auction__totalLove
  auction__finished
  auction__blockNumber
  auction__blockTimestamp
  auction__transactionHash
  auction__endBlockNumber
  auction__endBlockTimestamp
  auction__endTransactionHash
  blockNumber
  blockTimestamp
  transactionHash
}

scalar Bytes

type FeedAminalEvent {
  id: Bytes!
  aminal: Aminal!
  sender: User!
  amount: BigInt!
  love: BigInt!
  totalLove: BigInt!
  energy: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input FeedAminalEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  aminal: String
  aminal_not: String
  aminal_gt: String
  aminal_lt: String
  aminal_gte: String
  aminal_lte: String
  aminal_in: [String!]
  aminal_not_in: [String!]
  aminal_contains: String
  aminal_contains_nocase: String
  aminal_not_contains: String
  aminal_not_contains_nocase: String
  aminal_starts_with: String
  aminal_starts_with_nocase: String
  aminal_not_starts_with: String
  aminal_not_starts_with_nocase: String
  aminal_ends_with: String
  aminal_ends_with_nocase: String
  aminal_not_ends_with: String
  aminal_not_ends_with_nocase: String
  aminal_: Aminal_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  love: BigInt
  love_not: BigInt
  love_gt: BigInt
  love_lt: BigInt
  love_gte: BigInt
  love_lte: BigInt
  love_in: [BigInt!]
  love_not_in: [BigInt!]
  totalLove: BigInt
  totalLove_not: BigInt
  totalLove_gt: BigInt
  totalLove_lt: BigInt
  totalLove_gte: BigInt
  totalLove_lte: BigInt
  totalLove_in: [BigInt!]
  totalLove_not_in: [BigInt!]
  energy: BigInt
  energy_not: BigInt
  energy_gt: BigInt
  energy_lt: BigInt
  energy_gte: BigInt
  energy_lte: BigInt
  energy_in: [BigInt!]
  energy_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedAminalEvent_filter]
  or: [FeedAminalEvent_filter]
}

enum FeedAminalEvent_orderBy {
  id
  aminal
  aminal__id
  aminal__contractAddress
  aminal__aminalIndex
  aminal__auctionId
  aminal__backId
  aminal__armId
  aminal__tailId
  aminal__earsId
  aminal__bodyId
  aminal__faceId
  aminal__mouthId
  aminal__miscId
  aminal__tokenURI
  aminal__energy
  aminal__totalLove
  aminal__ethBalance
  aminal__blockNumber
  aminal__blockTimestamp
  aminal__transactionHash
  sender
  sender__id
  sender__address
  amount
  love
  totalLove
  energy
  blockNumber
  blockTimestamp
  transactionHash
}

type GeneAuction {
  id: Bytes!
  auctionId: BigInt!
  aminalOne: Aminal!
  aminalTwo: Aminal!
  totalLove: BigInt!
  finished: Boolean!
  childAminal: Aminal
  winningGeneIds: [BigInt!]
  proposals(skip: Int = 0, first: Int = 100, orderBy: GeneProposal_orderBy, orderDirection: OrderDirection, where: GeneProposal_filter): [GeneProposal!]!
  votes(skip: Int = 0, first: Int = 100, orderBy: GeneVote_orderBy, orderDirection: OrderDirection, where: GeneVote_filter): [GeneVote!]!
  payouts(skip: Int = 0, first: Int = 100, orderBy: GeneCreatorPayout_orderBy, orderDirection: OrderDirection, where: GeneCreatorPayout_filter): [GeneCreatorPayout!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  endBlockNumber: BigInt
  endBlockTimestamp: BigInt
  endTransactionHash: Bytes
}

input GeneAuction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  aminalOne: String
  aminalOne_not: String
  aminalOne_gt: String
  aminalOne_lt: String
  aminalOne_gte: String
  aminalOne_lte: String
  aminalOne_in: [String!]
  aminalOne_not_in: [String!]
  aminalOne_contains: String
  aminalOne_contains_nocase: String
  aminalOne_not_contains: String
  aminalOne_not_contains_nocase: String
  aminalOne_starts_with: String
  aminalOne_starts_with_nocase: String
  aminalOne_not_starts_with: String
  aminalOne_not_starts_with_nocase: String
  aminalOne_ends_with: String
  aminalOne_ends_with_nocase: String
  aminalOne_not_ends_with: String
  aminalOne_not_ends_with_nocase: String
  aminalOne_: Aminal_filter
  aminalTwo: String
  aminalTwo_not: String
  aminalTwo_gt: String
  aminalTwo_lt: String
  aminalTwo_gte: String
  aminalTwo_lte: String
  aminalTwo_in: [String!]
  aminalTwo_not_in: [String!]
  aminalTwo_contains: String
  aminalTwo_contains_nocase: String
  aminalTwo_not_contains: String
  aminalTwo_not_contains_nocase: String
  aminalTwo_starts_with: String
  aminalTwo_starts_with_nocase: String
  aminalTwo_not_starts_with: String
  aminalTwo_not_starts_with_nocase: String
  aminalTwo_ends_with: String
  aminalTwo_ends_with_nocase: String
  aminalTwo_not_ends_with: String
  aminalTwo_not_ends_with_nocase: String
  aminalTwo_: Aminal_filter
  totalLove: BigInt
  totalLove_not: BigInt
  totalLove_gt: BigInt
  totalLove_lt: BigInt
  totalLove_gte: BigInt
  totalLove_lte: BigInt
  totalLove_in: [BigInt!]
  totalLove_not_in: [BigInt!]
  finished: Boolean
  finished_not: Boolean
  finished_in: [Boolean!]
  finished_not_in: [Boolean!]
  childAminal: String
  childAminal_not: String
  childAminal_gt: String
  childAminal_lt: String
  childAminal_gte: String
  childAminal_lte: String
  childAminal_in: [String!]
  childAminal_not_in: [String!]
  childAminal_contains: String
  childAminal_contains_nocase: String
  childAminal_not_contains: String
  childAminal_not_contains_nocase: String
  childAminal_starts_with: String
  childAminal_starts_with_nocase: String
  childAminal_not_starts_with: String
  childAminal_not_starts_with_nocase: String
  childAminal_ends_with: String
  childAminal_ends_with_nocase: String
  childAminal_not_ends_with: String
  childAminal_not_ends_with_nocase: String
  childAminal_: Aminal_filter
  winningGeneIds: [BigInt!]
  winningGeneIds_not: [BigInt!]
  winningGeneIds_contains: [BigInt!]
  winningGeneIds_contains_nocase: [BigInt!]
  winningGeneIds_not_contains: [BigInt!]
  winningGeneIds_not_contains_nocase: [BigInt!]
  proposals_: GeneProposal_filter
  votes_: GeneVote_filter
  payouts_: GeneCreatorPayout_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  endBlockNumber: BigInt
  endBlockNumber_not: BigInt
  endBlockNumber_gt: BigInt
  endBlockNumber_lt: BigInt
  endBlockNumber_gte: BigInt
  endBlockNumber_lte: BigInt
  endBlockNumber_in: [BigInt!]
  endBlockNumber_not_in: [BigInt!]
  endBlockTimestamp: BigInt
  endBlockTimestamp_not: BigInt
  endBlockTimestamp_gt: BigInt
  endBlockTimestamp_lt: BigInt
  endBlockTimestamp_gte: BigInt
  endBlockTimestamp_lte: BigInt
  endBlockTimestamp_in: [BigInt!]
  endBlockTimestamp_not_in: [BigInt!]
  endTransactionHash: Bytes
  endTransactionHash_not: Bytes
  endTransactionHash_gt: Bytes
  endTransactionHash_lt: Bytes
  endTransactionHash_gte: Bytes
  endTransactionHash_lte: Bytes
  endTransactionHash_in: [Bytes!]
  endTransactionHash_not_in: [Bytes!]
  endTransactionHash_contains: Bytes
  endTransactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GeneAuction_filter]
  or: [GeneAuction_filter]
}

enum GeneAuction_orderBy {
  id
  auctionId
  aminalOne
  aminalOne__id
  aminalOne__contractAddress
  aminalOne__aminalIndex
  aminalOne__auctionId
  aminalOne__backId
  aminalOne__armId
  aminalOne__tailId
  aminalOne__earsId
  aminalOne__bodyId
  aminalOne__faceId
  aminalOne__mouthId
  aminalOne__miscId
  aminalOne__tokenURI
  aminalOne__energy
  aminalOne__totalLove
  aminalOne__ethBalance
  aminalOne__blockNumber
  aminalOne__blockTimestamp
  aminalOne__transactionHash
  aminalTwo
  aminalTwo__id
  aminalTwo__contractAddress
  aminalTwo__aminalIndex
  aminalTwo__auctionId
  aminalTwo__backId
  aminalTwo__armId
  aminalTwo__tailId
  aminalTwo__earsId
  aminalTwo__bodyId
  aminalTwo__faceId
  aminalTwo__mouthId
  aminalTwo__miscId
  aminalTwo__tokenURI
  aminalTwo__energy
  aminalTwo__totalLove
  aminalTwo__ethBalance
  aminalTwo__blockNumber
  aminalTwo__blockTimestamp
  aminalTwo__transactionHash
  totalLove
  finished
  childAminal
  childAminal__id
  childAminal__contractAddress
  childAminal__aminalIndex
  childAminal__auctionId
  childAminal__backId
  childAminal__armId
  childAminal__tailId
  childAminal__earsId
  childAminal__bodyId
  childAminal__faceId
  childAminal__mouthId
  childAminal__miscId
  childAminal__tokenURI
  childAminal__energy
  childAminal__totalLove
  childAminal__ethBalance
  childAminal__blockNumber
  childAminal__blockTimestamp
  childAminal__transactionHash
  winningGeneIds
  proposals
  votes
  payouts
  blockNumber
  blockTimestamp
  transactionHash
  endBlockNumber
  endBlockTimestamp
  endTransactionHash
}

type GeneCreatorPayout {
  id: Bytes!
  auction: GeneAuction!
  geneNFT: GeneNFT!
  creator: User!
  amount: BigInt!
  auctionId: BigInt!
  geneId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GeneCreatorPayout_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: GeneAuction_filter
  geneNFT: String
  geneNFT_not: String
  geneNFT_gt: String
  geneNFT_lt: String
  geneNFT_gte: String
  geneNFT_lte: String
  geneNFT_in: [String!]
  geneNFT_not_in: [String!]
  geneNFT_contains: String
  geneNFT_contains_nocase: String
  geneNFT_not_contains: String
  geneNFT_not_contains_nocase: String
  geneNFT_starts_with: String
  geneNFT_starts_with_nocase: String
  geneNFT_not_starts_with: String
  geneNFT_not_starts_with_nocase: String
  geneNFT_ends_with: String
  geneNFT_ends_with_nocase: String
  geneNFT_not_ends_with: String
  geneNFT_not_ends_with_nocase: String
  geneNFT_: GeneNFT_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  geneId: BigInt
  geneId_not: BigInt
  geneId_gt: BigInt
  geneId_lt: BigInt
  geneId_gte: BigInt
  geneId_lte: BigInt
  geneId_in: [BigInt!]
  geneId_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GeneCreatorPayout_filter]
  or: [GeneCreatorPayout_filter]
}

enum GeneCreatorPayout_orderBy {
  id
  auction
  auction__id
  auction__auctionId
  auction__totalLove
  auction__finished
  auction__blockNumber
  auction__blockTimestamp
  auction__transactionHash
  auction__endBlockNumber
  auction__endBlockTimestamp
  auction__endTransactionHash
  geneNFT
  geneNFT__id
  geneNFT__tokenId
  geneNFT__traitType
  geneNFT__svg
  geneNFT__name
  geneNFT__description
  geneNFT__totalEarnings
  geneNFT__blockNumber
  geneNFT__blockTimestamp
  geneNFT__transactionHash
  creator
  creator__id
  creator__address
  amount
  auctionId
  geneId
  blockNumber
  blockTimestamp
  transactionHash
}

type GeneNFT {
  id: Bytes!
  tokenId: BigInt!
  traitType: Int!
  owner: User!
  creator: User!
  svg: String
  name: String
  description: String
  proposalsUsingGene(skip: Int = 0, first: Int = 100, orderBy: GeneProposal_orderBy, orderDirection: OrderDirection, where: GeneProposal_filter): [GeneProposal!]!
  totalEarnings: BigInt!
  payouts(skip: Int = 0, first: Int = 100, orderBy: GeneCreatorPayout_orderBy, orderDirection: OrderDirection, where: GeneCreatorPayout_filter): [GeneCreatorPayout!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GeneNFT_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  traitType: Int
  traitType_not: Int
  traitType_gt: Int
  traitType_lt: Int
  traitType_gte: Int
  traitType_lte: Int
  traitType_in: [Int!]
  traitType_not_in: [Int!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: User_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: User_filter
  svg: String
  svg_not: String
  svg_gt: String
  svg_lt: String
  svg_gte: String
  svg_lte: String
  svg_in: [String!]
  svg_not_in: [String!]
  svg_contains: String
  svg_contains_nocase: String
  svg_not_contains: String
  svg_not_contains_nocase: String
  svg_starts_with: String
  svg_starts_with_nocase: String
  svg_not_starts_with: String
  svg_not_starts_with_nocase: String
  svg_ends_with: String
  svg_ends_with_nocase: String
  svg_not_ends_with: String
  svg_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  proposalsUsingGene_: GeneProposal_filter
  totalEarnings: BigInt
  totalEarnings_not: BigInt
  totalEarnings_gt: BigInt
  totalEarnings_lt: BigInt
  totalEarnings_gte: BigInt
  totalEarnings_lte: BigInt
  totalEarnings_in: [BigInt!]
  totalEarnings_not_in: [BigInt!]
  payouts_: GeneCreatorPayout_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GeneNFT_filter]
  or: [GeneNFT_filter]
}

enum GeneNFT_orderBy {
  id
  tokenId
  traitType
  owner
  owner__id
  owner__address
  creator
  creator__id
  creator__address
  svg
  name
  description
  proposalsUsingGene
  totalEarnings
  payouts
  blockNumber
  blockTimestamp
  transactionHash
}

type GeneProposal {
  id: Bytes!
  auction: GeneAuction!
  geneNFT: GeneNFT!
  traitType: Int!
  proposer: User!
  loveVotes: BigInt!
  removeVotes: BigInt!
  removed: Boolean!
  votes(skip: Int = 0, first: Int = 100, orderBy: GeneVote_orderBy, orderDirection: OrderDirection, where: GeneVote_filter): [GeneVote!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GeneProposal_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: GeneAuction_filter
  geneNFT: String
  geneNFT_not: String
  geneNFT_gt: String
  geneNFT_lt: String
  geneNFT_gte: String
  geneNFT_lte: String
  geneNFT_in: [String!]
  geneNFT_not_in: [String!]
  geneNFT_contains: String
  geneNFT_contains_nocase: String
  geneNFT_not_contains: String
  geneNFT_not_contains_nocase: String
  geneNFT_starts_with: String
  geneNFT_starts_with_nocase: String
  geneNFT_not_starts_with: String
  geneNFT_not_starts_with_nocase: String
  geneNFT_ends_with: String
  geneNFT_ends_with_nocase: String
  geneNFT_not_ends_with: String
  geneNFT_not_ends_with_nocase: String
  geneNFT_: GeneNFT_filter
  traitType: Int
  traitType_not: Int
  traitType_gt: Int
  traitType_lt: Int
  traitType_gte: Int
  traitType_lte: Int
  traitType_in: [Int!]
  traitType_not_in: [Int!]
  proposer: String
  proposer_not: String
  proposer_gt: String
  proposer_lt: String
  proposer_gte: String
  proposer_lte: String
  proposer_in: [String!]
  proposer_not_in: [String!]
  proposer_contains: String
  proposer_contains_nocase: String
  proposer_not_contains: String
  proposer_not_contains_nocase: String
  proposer_starts_with: String
  proposer_starts_with_nocase: String
  proposer_not_starts_with: String
  proposer_not_starts_with_nocase: String
  proposer_ends_with: String
  proposer_ends_with_nocase: String
  proposer_not_ends_with: String
  proposer_not_ends_with_nocase: String
  proposer_: User_filter
  loveVotes: BigInt
  loveVotes_not: BigInt
  loveVotes_gt: BigInt
  loveVotes_lt: BigInt
  loveVotes_gte: BigInt
  loveVotes_lte: BigInt
  loveVotes_in: [BigInt!]
  loveVotes_not_in: [BigInt!]
  removeVotes: BigInt
  removeVotes_not: BigInt
  removeVotes_gt: BigInt
  removeVotes_lt: BigInt
  removeVotes_gte: BigInt
  removeVotes_lte: BigInt
  removeVotes_in: [BigInt!]
  removeVotes_not_in: [BigInt!]
  removed: Boolean
  removed_not: Boolean
  removed_in: [Boolean!]
  removed_not_in: [Boolean!]
  votes_: GeneVote_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GeneProposal_filter]
  or: [GeneProposal_filter]
}

enum GeneProposal_orderBy {
  id
  auction
  auction__id
  auction__auctionId
  auction__totalLove
  auction__finished
  auction__blockNumber
  auction__blockTimestamp
  auction__transactionHash
  auction__endBlockNumber
  auction__endBlockTimestamp
  auction__endTransactionHash
  geneNFT
  geneNFT__id
  geneNFT__tokenId
  geneNFT__traitType
  geneNFT__svg
  geneNFT__name
  geneNFT__description
  geneNFT__totalEarnings
  geneNFT__blockNumber
  geneNFT__blockTimestamp
  geneNFT__transactionHash
  traitType
  proposer
  proposer__id
  proposer__address
  loveVotes
  removeVotes
  removed
  votes
  blockNumber
  blockTimestamp
  transactionHash
}

type GeneVote {
  id: Bytes!
  auction: GeneAuction!
  proposal: GeneProposal!
  voter: User!
  isRemoveVote: Boolean!
  loveAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GeneVote_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: GeneAuction_filter
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: GeneProposal_filter
  voter: String
  voter_not: String
  voter_gt: String
  voter_lt: String
  voter_gte: String
  voter_lte: String
  voter_in: [String!]
  voter_not_in: [String!]
  voter_contains: String
  voter_contains_nocase: String
  voter_not_contains: String
  voter_not_contains_nocase: String
  voter_starts_with: String
  voter_starts_with_nocase: String
  voter_not_starts_with: String
  voter_not_starts_with_nocase: String
  voter_ends_with: String
  voter_ends_with_nocase: String
  voter_not_ends_with: String
  voter_not_ends_with_nocase: String
  voter_: User_filter
  isRemoveVote: Boolean
  isRemoveVote_not: Boolean
  isRemoveVote_in: [Boolean!]
  isRemoveVote_not_in: [Boolean!]
  loveAmount: BigInt
  loveAmount_not: BigInt
  loveAmount_gt: BigInt
  loveAmount_lt: BigInt
  loveAmount_gte: BigInt
  loveAmount_lte: BigInt
  loveAmount_in: [BigInt!]
  loveAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GeneVote_filter]
  or: [GeneVote_filter]
}

enum GeneVote_orderBy {
  id
  auction
  auction__id
  auction__auctionId
  auction__totalLove
  auction__finished
  auction__blockNumber
  auction__blockTimestamp
  auction__transactionHash
  auction__endBlockNumber
  auction__endBlockTimestamp
  auction__endTransactionHash
  proposal
  proposal__id
  proposal__traitType
  proposal__loveVotes
  proposal__removeVotes
  proposal__removed
  proposal__blockNumber
  proposal__blockTimestamp
  proposal__transactionHash
  voter
  voter__id
  voter__address
  isRemoveVote
  loveAmount
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  aminalFactory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AminalFactory
  aminalFactories(
    skip: Int = 0
    first: Int = 100
    orderBy: AminalFactory_orderBy
    orderDirection: OrderDirection
    where: AminalFactory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AminalFactory!]!
  aminal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Aminal
  aminals(
    skip: Int = 0
    first: Int = 100
    orderBy: Aminal_orderBy
    orderDirection: OrderDirection
    where: Aminal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Aminal!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  relationship(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Relationship
  relationships(
    skip: Int = 0
    first: Int = 100
    orderBy: Relationship_orderBy
    orderDirection: OrderDirection
    where: Relationship_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Relationship!]!
  breedAminalEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BreedAminalEvent
  breedAminalEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BreedAminalEvent_orderBy
    orderDirection: OrderDirection
    where: BreedAminalEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BreedAminalEvent!]!
  feedAminalEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedAminalEvent
  feedAminalEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedAminalEvent_orderBy
    orderDirection: OrderDirection
    where: FeedAminalEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedAminalEvent!]!
  skillUsed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SkillUsed
  skillUseds(
    skip: Int = 0
    first: Int = 100
    orderBy: SkillUsed_orderBy
    orderDirection: OrderDirection
    where: SkillUsed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SkillUsed!]!
  geneAuction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GeneAuction
  geneAuctions(
    skip: Int = 0
    first: Int = 100
    orderBy: GeneAuction_orderBy
    orderDirection: OrderDirection
    where: GeneAuction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GeneAuction!]!
  geneNFT(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GeneNFT
  geneNFTs(
    skip: Int = 0
    first: Int = 100
    orderBy: GeneNFT_orderBy
    orderDirection: OrderDirection
    where: GeneNFT_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GeneNFT!]!
  geneProposal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GeneProposal
  geneProposals(
    skip: Int = 0
    first: Int = 100
    orderBy: GeneProposal_orderBy
    orderDirection: OrderDirection
    where: GeneProposal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GeneProposal!]!
  geneVote(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GeneVote
  geneVotes(
    skip: Int = 0
    first: Int = 100
    orderBy: GeneVote_orderBy
    orderDirection: OrderDirection
    where: GeneVote_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GeneVote!]!
  geneCreatorPayout(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GeneCreatorPayout
  geneCreatorPayouts(
    skip: Int = 0
    first: Int = 100
    orderBy: GeneCreatorPayout_orderBy
    orderDirection: OrderDirection
    where: GeneCreatorPayout_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GeneCreatorPayout!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Relationship {
  id: Bytes!
  user: User!
  aminal: Aminal!
  love: BigInt!
}

input Relationship_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  aminal: String
  aminal_not: String
  aminal_gt: String
  aminal_lt: String
  aminal_gte: String
  aminal_lte: String
  aminal_in: [String!]
  aminal_not_in: [String!]
  aminal_contains: String
  aminal_contains_nocase: String
  aminal_not_contains: String
  aminal_not_contains_nocase: String
  aminal_starts_with: String
  aminal_starts_with_nocase: String
  aminal_not_starts_with: String
  aminal_not_starts_with_nocase: String
  aminal_ends_with: String
  aminal_ends_with_nocase: String
  aminal_not_ends_with: String
  aminal_not_ends_with_nocase: String
  aminal_: Aminal_filter
  love: BigInt
  love_not: BigInt
  love_gt: BigInt
  love_lt: BigInt
  love_gte: BigInt
  love_lte: BigInt
  love_in: [BigInt!]
  love_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Relationship_filter]
  or: [Relationship_filter]
}

enum Relationship_orderBy {
  id
  user
  user__id
  user__address
  aminal
  aminal__id
  aminal__contractAddress
  aminal__aminalIndex
  aminal__auctionId
  aminal__backId
  aminal__armId
  aminal__tailId
  aminal__earsId
  aminal__bodyId
  aminal__faceId
  aminal__mouthId
  aminal__miscId
  aminal__tokenURI
  aminal__energy
  aminal__totalLove
  aminal__ethBalance
  aminal__blockNumber
  aminal__blockTimestamp
  aminal__transactionHash
  love
}

type SkillUsed {
  id: Bytes!
  aminal: Aminal!
  caller: User!
  skillAddress: Bytes!
  selector: Bytes!
  newEnergy: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SkillUsed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  aminal: String
  aminal_not: String
  aminal_gt: String
  aminal_lt: String
  aminal_gte: String
  aminal_lte: String
  aminal_in: [String!]
  aminal_not_in: [String!]
  aminal_contains: String
  aminal_contains_nocase: String
  aminal_not_contains: String
  aminal_not_contains_nocase: String
  aminal_starts_with: String
  aminal_starts_with_nocase: String
  aminal_not_starts_with: String
  aminal_not_starts_with_nocase: String
  aminal_ends_with: String
  aminal_ends_with_nocase: String
  aminal_not_ends_with: String
  aminal_not_ends_with_nocase: String
  aminal_: Aminal_filter
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  skillAddress: Bytes
  skillAddress_not: Bytes
  skillAddress_gt: Bytes
  skillAddress_lt: Bytes
  skillAddress_gte: Bytes
  skillAddress_lte: Bytes
  skillAddress_in: [Bytes!]
  skillAddress_not_in: [Bytes!]
  skillAddress_contains: Bytes
  skillAddress_not_contains: Bytes
  selector: Bytes
  selector_not: Bytes
  selector_gt: Bytes
  selector_lt: Bytes
  selector_gte: Bytes
  selector_lte: Bytes
  selector_in: [Bytes!]
  selector_not_in: [Bytes!]
  selector_contains: Bytes
  selector_not_contains: Bytes
  newEnergy: BigInt
  newEnergy_not: BigInt
  newEnergy_gt: BigInt
  newEnergy_lt: BigInt
  newEnergy_gte: BigInt
  newEnergy_lte: BigInt
  newEnergy_in: [BigInt!]
  newEnergy_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SkillUsed_filter]
  or: [SkillUsed_filter]
}

enum SkillUsed_orderBy {
  id
  aminal
  aminal__id
  aminal__contractAddress
  aminal__aminalIndex
  aminal__auctionId
  aminal__backId
  aminal__armId
  aminal__tailId
  aminal__earsId
  aminal__bodyId
  aminal__faceId
  aminal__mouthId
  aminal__miscId
  aminal__tokenURI
  aminal__energy
  aminal__totalLove
  aminal__ethBalance
  aminal__blockNumber
  aminal__blockTimestamp
  aminal__transactionHash
  caller
  caller__id
  caller__address
  skillAddress
  selector
  newEnergy
  blockNumber
  blockTimestamp
  transactionHash
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type User {
  id: Bytes!
  address: Bytes!
  lovers(skip: Int = 0, first: Int = 100, orderBy: Relationship_orderBy, orderDirection: OrderDirection, where: Relationship_filter): [Relationship]!
  geneProposals(skip: Int = 0, first: Int = 100, orderBy: GeneProposal_orderBy, orderDirection: OrderDirection, where: GeneProposal_filter): [GeneProposal]!
  genesCreated(skip: Int = 0, first: Int = 100, orderBy: GeneNFT_orderBy, orderDirection: OrderDirection, where: GeneNFT_filter): [GeneNFT]!
  genesOwned(skip: Int = 0, first: Int = 100, orderBy: GeneNFT_orderBy, orderDirection: OrderDirection, where: GeneNFT_filter): [GeneNFT]!
  geneVotes(skip: Int = 0, first: Int = 100, orderBy: GeneVote_orderBy, orderDirection: OrderDirection, where: GeneVote_filter): [GeneVote]!
}

input User_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  lovers_: Relationship_filter
  geneProposals_: GeneProposal_filter
  genesCreated_: GeneNFT_filter
  genesOwned_: GeneNFT_filter
  geneVotes_: GeneVote_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  lovers
  geneProposals
  genesCreated
  genesOwned
  geneVotes
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}